# test_quick.py
# Prueba r√°pida para verificar que la funcionalidad de hash funciona

import os
import sys

def test_hash_functionality():
    """Prueba r√°pida de funcionalidad de hash"""
    
    print("üß™ PRUEBA R√ÅPIDA DE HASH")
    print("=" * 40)
    
    try:
        # Importar SyncService
        from services.sync_service import SyncService
        print("‚úÖ SyncService importado correctamente")
        
        # Crear instancia
        sync_service = SyncService()
        print("‚úÖ SyncService instanciado")
        
        # Verificar que tiene m√©todos de hash
        if hasattr(sync_service, 'generate_row_hash'):
            print("‚úÖ M√©todo generate_row_hash existe")
        else:
            print("‚ùå M√©todo generate_row_hash NO existe")
            return False
        
        if hasattr(sync_service, 'hash_tables'):
            print("‚úÖ Configuraci√≥n hash_tables existe")
            print(f"   Tablas configuradas: {list(sync_service.hash_tables.keys())}")
        else:
            print("‚ùå Configuraci√≥n hash_tables NO existe")
            return False
        
        # Probar generaci√≥n de hash
        sample_data = {
            'documento_tipo': 'DNI',
            'documento': '12345678',
            'nombre': 'Juan P√©rez',
            'email': 'juan@example.com',
            'activo': 'S'
        }
        
        hash1 = sync_service.generate_row_hash(sample_data)
        hash2 = sync_service.generate_row_hash(sample_data)
        
        if hash1 == hash2:
            print(f"‚úÖ Hash consistente: {hash1[:12]}...")
        else:
            print("‚ùå Hash NO es consistente")
            return False
        
        # Verificar que cambios generan hash diferente
        sample_data2 = sample_data.copy()
        sample_data2['nombre'] = 'Mar√≠a Garc√≠a'
        hash3 = sync_service.generate_row_hash(sample_data2)
        
        if hash1 != hash3:
            print(f"‚úÖ Cambios detectados: {hash3[:12]}... (diferente)")
        else:
            print("‚ùå Cambios NO detectados")
            return False
        
        print("\nüéâ TODAS LAS PRUEBAS EXITOSAS")
        print("‚úÖ La funcionalidad de hash est√° funcionando")
        print("‚úÖ Ya puedes ejecutar la sincronizaci√≥n")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        print("   ¬øEjecutaste el parche quick_fix_hash.py?")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_sql_server_connection():
    """Prueba conexi√≥n a SQL Server"""
    print("\nüîç PROBANDO CONEXI√ìN SQL SERVER")
    print("=" * 40)
    
    try:
        from adapters.sqlserver_adapter import SQLServerAdapter
        sqlserver = SQLServerAdapter()
        
        if sqlserver.engine:
            result = sqlserver.test_connection()
            if result:
                print(f"‚úÖ SQL Server: {result}")
                
                # Verificar tabla
                if sqlserver.table_exists('Bienes_01_BENEFICIARIOS'):
                    print("‚úÖ Tabla Bienes_01_BENEFICIARIOS existe")
                    
                    # Verificar columna hash
                    columns = sqlserver.get_table_columns('Bienes_01_BENEFICIARIOS')
                    has_hash = 'row_hash' in columns['COLUMN_NAME'].values if columns is not None else False
                    
                    if has_hash:
                        print("‚úÖ Columna row_hash existe")
                    else:
                        print("‚ö†Ô∏è  Columna row_hash NO existe")
                        print("   Ejecuta: add_hash_column.sql")
                    
                    return has_hash
                else:
                    print("‚ùå Tabla Bienes_01_BENEFICIARIOS NO existe")
                    return False
            else:
                print("‚ùå SQL Server: Error en conexi√≥n")
                return False
        else:
            print("‚ùå SQL Server: No inicializado")
            return False
            
    except Exception as e:
        print(f"‚ùå Error SQL Server: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ VERIFICACI√ìN R√ÅPIDA DE INSTALACI√ìN")
    print("=" * 50)
    
    # Test 1: Funcionalidad de hash
    hash_ok = test_hash_functionality()
    
    # Test 2: SQL Server
    sql_ok = test_sql_server_connection()
    
    print("\n" + "=" * 50)
    print("üìã RESUMEN:")
    print(f"Funcionalidad Hash: {'‚úÖ OK' if hash_ok else '‚ùå FALLA'}")
    print(f"SQL Server + Tabla: {'‚úÖ OK' if sql_ok else '‚ùå FALLA'}")
    
    if hash_ok and sql_ok:
        print("\nüéâ TODO LISTO")
        print("‚úÖ Puedes ejecutar:")
        print("   python main.py --mode sqlserver --sync-mode incremental")
    else:
        print("\n‚ö†Ô∏è  FALTA CONFIGURACI√ìN")
        if not hash_ok:
            print("1. Ejecutar: python quick_fix_hash.py")
        if not sql_ok:
            print("2. Ejecutar en SQL Server: add_hash_column.sql")
    
    print("=" * 50)
    
    return hash_ok and sql_ok

if __name__ == "__main__":
    main()
